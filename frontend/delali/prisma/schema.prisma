// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model BlogPost {
  id            String   @id @default(cuid())
  title         String
  content       String?
  slug          String?
  author        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId    Int
  tags          String[]
  dateCreated   DateTime @default(now())
  dateModified  DateTime @updatedAt
  status        String
  featuredImage String?

  category Category @relation(fields: [categoryId], references: [id])
  userId   String?
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  posts BlogPost[]
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  CONTRIBUTOR // create but need review by editor or admin before publish
  EDITOR //CRUD Review others' articles
  SUBSCRIBER // Read and comment
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(SUBSCRIBER)
  accounts      Account[]
  sessions      Session[]
  BlogPost      BlogPost[]
  Profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
